#!/bin/bash

# Цвета для оформления вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Функция для вывода заголовка
print_header() {
    clear
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${YELLOW}       Установка и настройка ноды Marzban на сервер         ${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo
}

# Функция для вывода статуса
print_status() {
    echo -e "${GREEN}[+] $1${NC}"
}

# Функция для вывода ошибки
print_error() {
    echo -e "${RED}[-] Ошибка: $1${NC}"
    exit 1
}

# Проверка, запущен ли скрипт от root
if [[ $EUID -ne 0 ]]; then
    print_error "Скрипт должен быть запущен с правами root (sudo)"
fi

# Запрос данных у пользователя
print_header
echo -e "${YELLOW}Введите необходимые данные для настройки:${NC}"
echo
read -p "Введите имя ноды (например, location-node-1): " NODE_NAME
read -p "Введите домен (например, sub.domain.com): " DOMAIN
read -p "Введите email для Cloudflare: " CF_EMAIL
read -p "Введите API ключ Cloudflare: " CF_API_KEY
read -p "Введите IP адрес главного сервера Marzban: " MARZBAN_IP
echo -e "${YELLOW}Введите SSL сертификат для подключения ноды к главному серверу (в формате -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----):${NC}"
echo -e "${BLUE}Вставьте сертификат и завершите ввод комбинацией Ctrl+D:${NC}"
CERTIFICATE=$(cat)

# Проверка ввода
if [[ -z "$NODE_NAME" || -z "$DOMAIN" || -z "$CF_EMAIL" || -z "$CF_API_KEY" || -z "$MARZBAN_IP" || -z "$CERTIFICATE" ]]; then
    print_error "Все поля, включая сертификат, должны быть заполнены!"
fi

# Проверка формата сертификата
if ! echo "$CERTIFICATE" | grep -q "-----BEGIN CERTIFICATE-----" || ! echo "$CERTIFICATE" | grep -q "-----END CERTIFICATE-----"; then
    print_error "Сертификат должен быть в формате PEM (содержать -----BEGIN CERTIFICATE----- и -----END CERTIFICATE-----)"
fi

print_header
print_status "Начинаем установку и настройку..."

# 1. Установка Nginx
print_status "Установка Nginx..."
curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null || print_error "Не удалось добавить ключ Nginx"
gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx" | tee /etc/apt/sources.list.d/nginx.list
echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" | tee /etc/apt/preferences.d/99nginx
apt update && apt install -y nginx || print_error "Не удалось установить Nginx"

# 2. Установка ноды Marzban
print_status "Установка ноды Marzban..."
bash -c "$(curl -sL https://github.com/Gozargah/Marzban-scripts/raw/master/marzban-node.sh)" @ install --name "$NODE_NAME" || print_error "Не удалось установить ноду Marzban"

# 3. Сохранение SSL сертификата для Marzban
print_status "Сохранение SSL сертификата для ноды..."
mkdir -p /opt/"$NODE_NAME"/certs
echo "$CERTIFICATE" > /opt/"$NODE_NAME"/certs/marzban-node-cert.pem || print_error "Не удалось сохранить сертификат"

# 4. Создание папки и файлов логов
print_status "Создание директории и файлов логов..."
mkdir -p /var/lib/marzban/log
touch /var/lib/marzban/log/{access.log,error.log} || print_error "Не удалось создать файлы логов"

# 5. Настройка docker-compose.yml
print_status "Настройка docker-compose.yml..."
cd /opt/"$NODE_NAME" || print_error "Не удалось перейти в директорию /opt/$NODE_NAME"
if ! grep -q "/var/lib/marzban/log" docker-compose.yml; then
    sed -i '/volumes:/a \ \ \ \ - /var/lib/marzban/log:/var/lib/marzban/log' docker-compose.yml || print_error "Не удалось добавить том в docker-compose.yml"
fi
if ! grep -q "/opt/$NODE_NAME/certs:/var/lib/marzban/certs" docker-compose.yml; then
    sed -i '/volumes:/a \ \ \ \ - /opt/'"$NODE_NAME"'/certs:/var/lib/marzban/certs' docker-compose.yml || print_error "Не удалось добавить том для сертификата в docker-compose.yml"
fi
docker compose up -d || print_error "Не удалось запустить docker-compose"

# 6. Получение SSL сертификата для домена
print_status "Установка certbot и получение SSL сертификата..."
apt install -y certbot python3-certbot-dns-cloudflare || print_error "Не удалось установить certbot"
echo -e "dns_cloudflare_email = $CF_EMAIL\ndns_cloudflare_api_key = $CF_API_KEY" > /etc/letsencrypt/dns-cloudflare.ini
chmod 600 /etc/letsencrypt/dns-cloudflare.ini
certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/dns-cloudflare.ini -d "$DOMAIN" --non-interactive --agree-tos -m "$CF_EMAIL" || print_error "Не удалось получить сертификат"

# 7. Настройка nginx.conf
print_status "Настройка nginx.conf..."
cat > /etc/nginx/nginx.conf <<EOL
user                              www-data;
pid                               /run/nginx.pid;
worker_processes                  auto;
worker_rlimit_nofile              65535;
error_log                         //var/lib/marzban/log/error.log;
include                           /etc/nginx/modules-enabled/*.conf;

events {
    multi_accept                  on;
    worker_connections            1024;
}

http {
    log_format proxy '\$proxy_protocol_addr [\$time_local] '
                        '"\$request" \$status \$body_bytes_sent '
                        '"\$http_referer" "\$http_user_agent"';

    access_log                    /var/lib/marzban/log/access.log proxy;
    sendfile                      on;
    tcp_nopush                    on;
    tcp_nodelay                   on;
    server_tokens                 off;
    log_not_found                 off;
    types_hash_max_size           2048;
    types_hash_bucket_size        64;
    client_max_body_size          16M;
    keepalive_timeout             75s;
    keepalive_requests            1000;
    reset_timedout_connection     on;
    include                       /etc/nginx/mime.types;
    default_type                  application/octet-stream;
    ssl_session_timeout           1d;
    ssl_session_cache             shared:SSL:1m;
    ssl_session_tickets           off;
    ssl_prefer_server_ciphers     on;
    ssl_protocols                 TLSv1.2 TLSv1.3;
    ssl_ciphers                   TLS13_AES_128_GCM_SHA256:TLS13_AES_256_GCM_SHA384:TLS13_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305;
    ssl_stapling                  on;
    ssl_stapling_verify           on;
    resolver                      127.0.0.1 valid=60s;
    resolver_timeout              2s;
    gzip                          on;

    include                       /etc/nginx/conf.d/*.conf;
}
stream {
    include /etc/nginx/stream-enabled/stream.conf;
}
EOL

# 8. Настройка local.conf
print_status "Настройка local.conf..."
mkdir -p /var/www/"$DOMAIN"
echo "<html><body><h1>Welcome to $DOMAIN</h1></body></html>" > /var/www/"$DOMAIN"/index.html
cat > /etc/nginx/conf.d/local.conf <<EOL
server {
  listen                               80;
  server_name                          $DOMAIN;
  location / {
    return 301                         https://$DOMAIN\$request_uri;
  }
}
server {
  listen                               9090 default_server;
  server_name                          _;
  location / {
    return 301                         https://${DOMAIN#sub.}\$request_uri;
  }
}
server {
  listen                               36076 ssl proxy_protocol;
  ssl_reject_handshake                 on;
}
server {
  listen                               36077 ssl proxy_protocol;
  http2                                on;
  server_name                          $DOMAIN;

  ssl_certificate                      /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
  ssl_certificate_key                  /etc/letsencrypt/live/$DOMAIN/privkey.pem;
  ssl_trusted_certificate              /etc/letsencrypt/live/$DOMAIN/chain.pem;

  ssl_dhparam                          /etc/nginx/dhparam.pem;

  index index.html;
  root /var/www/$DOMAIN/;
}
EOL

# 9. Генерация DH параметров
print_status "Генерация DH параметров..."
openssl dhparam -out /etc/nginx/dhparam.pem 2048 || print_error "Не удалось сгенерировать DH параметры"

# 10. Настройка stream.conf
print_status "Настройка stream.conf..."
mkdir -p /etc/nginx/stream-enabled
cat > /etc/nginx/stream-enabled/stream.conf <<EOL
map \$ssl_preread_server_name \$backend {
  default                              block;
  $DOMAIN                              xtls;
  ${DOMAIN#sub.}                       web;
}
upstream block {
  server 127.0.0.1:36076;
}
upstream web {
  server 127.0.0.1:7443;
}
upstream xtls {
  server 127.0.0.1:9443;
}
server {
  listen 443                           reuseport;
  ssl_preread                          on;
  proxy_protocol                       on;
  proxy_pass                           \$backend;
}
EOL

# 11. Настройка UFW
print_status "Настройка UFW..."
ufw enable
ufw allow 22
ufw allow 80
ufw allow 443
ufw allow from "$MARZBAN_IP" to any port 62050
ufw allow from "$MARZBAN_IP" to any port 62051
ufw status

# 12. Проверка и запуск Nginx
print_status "Проверка и запуск Nginx..."
nginx -t || print_error "Ошибка в конфигурации Nginx"
systemctl start nginx || print_error "Не удалось запустить Nginx"

# 13. Установка WARP
print_status "Установка WARP..."
cd && bash <(curl -fsSL https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh) w || print_error "Не удалось установить WARP"

# 14. Установка ядра Xanmod
print_status "Установка ядра Xanmod..."
wget -qO - https://gitlab.com/afrd.gpg | gpg --dearmor -o /usr/share/keyrings/xanmod-archive-keyring.gpg
echo 'deb [signed-by=/usr/share/keyrings/xanmod-archive-keyring.gpg] http://deb.xanmod.org releases main' | tee /etc/apt/sources.list.d/xanmod-release.list
apt update
apt install -y linux-xanmod-x64v3 || print_error "Не удалось установить ядро Xanmod"
depmod -a
modinfo tcp_bbr
echo -e "net.core.default_qdisc=fq\nnet.ipv4.tcp_congestion_control=bbr\nnet.ipv6.conf.all.disable_ipv6=1\nnet.ipv6.conf.default.disable_ipv6=1" >> /etc/sysctl.conf
sysctl -p

# 15. Установка блокировки торрентов
print_status "Установка блокировки торрентов..."
bash <(curl -fsSL git.new/install) || print_error "Не удалось установить блокировщик торрентов"
for config in /opt announced-blocker/config.yaml /opt/tblocker/config.yaml; do
    if [[ -f "$config" ]]; then
        sed -i 's|LogFile:.*|LogFile: "/var/lib/marzban/log/access.log"|' "$config"
    fi
done
systemctl restart torrent-blocker
systemctl restart tblocker

print_header
print_status "Установка и настройка ноды Marzban завершена успешно!"
echo -e "${YELLOW}Сертификат сохранен в /opt/$NODE_NAME/certs/marzban-node-cert.pem${NC}"
echo -e "${BLUE}После перезагрузки проверьте статус служб и подключите ноду к главному серверу Marzban, используя сохраненный сертификат.${NC}"
echo -e "${YELLOW}Сервер будет перезагружен для применения настроек ядра через 10 секунд (нажмите Ctrl+C для отмены).${NC}"
sleep 10
reboot
